@q taxonomy.web  @>
@q Created by Laurence D. Finston Di 20. Jun 07:37:23 CEST 2023  @>

@q * (1) Copyright and License. @>

@q This file is part of Taxonomy-Database, a package for taxonomy. @>
@q Copyright (C) 2021 Laurence D. Finston @>

@q Taxonomy-Database is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q Taxonomy-Database is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with Taxonomy-Database; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q Please send bug reports to Laurence.Finston@gmx.de @>

@q The author can be contacted at: @>
@q Laurence.Finston@gmx.de @>


@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>

#include <string.h>

#include <sys/types.h>

#include <errno.h>
#include <ctype.h>

#include <string>
#include <iomanip>
#include <ios>
#include <iostream>
#include <stdarg.h>
#include <limits.h>
#include <algorithm>
#include <fstream>
#include <iterator>
#include <math.h>
#include <sstream> 
#include <time.h> 
#include <vector> 
#include <map>

#include <mysql.h>

#if HAVE_CONFIG_H
   #include "config.h"
#endif 

/* #include <deque>   */
/* #include <stack>   */
/* #include <set>     */

@q * (1) @>
@
@<Global variables@>=
MYSQL_RES *result = 0;
MYSQL_ROW curr_row = 0;
MYSQL *mysql;
  
unsigned int row_ctr = 0; 
unsigned int field_ctr = 0;
long affected_rows = 0;

ofstream out_strm;

string datestamp_short;
string datestamp;

@ Function declarations.
@<Function declarations@>=
int
submit_mysql_query(string query_str);

int
get_datestamp(string &datestamp, string &datestamp_short);

/* main definition */

@ |main| definition.
@<|main| definition@>=
int
main(int argc, char **argv)
{
/* *** (3)   */

#if DEBUG_COMPILE
   bool DEBUG = true; /* |false| */
#endif /* |DEBUG_COMPILE|  */@; 

   int status = 0;

   stringstream temp_strm;

   cerr << "This is `taxonomy'." << endl;
   
   if (DEBUG)
     cerr << "Entering `main'." << endl;

@q ** (2) @>

   status = get_datestamp(datestamp, datestamp_short);

   if (DEBUG) 
     cerr << "datestamp == \"" << datestamp << "\"" << endl
	  << "datestamp_short == \"" << datestamp_short << "\"" 
	  << endl;


/* ** (2) Initialize  |mysql|  */

   mysql = mysql_init(0);

   if (mysql != 0)
     {
       if (DEBUG) 
         cerr << "mysql_init succeeded." << endl;
     }
   else
     {
       cerr << "ERROR!  In `main': `mysql_init failed'." << endl
            << "Exiting `taxonomy' unsuccessfully with exit status 1."
            << endl;

       exit(1);
     }

   unsigned int mysql_timeout = 120;
  
   // mysql_options(mysql, MYSQL_OPT_RECONNECT, 0);

   mysql_options(mysql, MYSQL_OPT_CONNECT_TIMEOUT, &mysql_timeout); 
  
   if (!mysql_real_connect(mysql,"localhost","taxonomy",0,"Taxonomy",0,NULL,0))
   {
     fprintf(stderr, "Failed to connect to database: Error: %s\n",
               mysql_error(mysql));
   }


@q *** (3) @>
@
@<|main| definition@>=

   out_strm.open("sub_taxonomy.tex");

   out_strm << "%% sub_taxonomy.tex" << endl 
            << "%% Generated by `taxonomy' " << datestamp  
            << endl << endl 
            << "\\datestamptoks={" << datestamp << "}" << endl 
            << "\\headline={\\hfil Generated by `taxonomy' on \\the\\datestamptoks\\hskip.5cm}" << endl 
            << endl << endl;

@q *** (3) @>
@
@<|main| definition@>=

   temp_strm << "select * from Kingdoms order by id";

   status = submit_mysql_query(temp_strm.str());

   cerr << "status == " << status << endl;

   if (status == 0)
   {
@q **** (4) @>

#if DEBUG_COMPILE
       if (DEBUG)
       { 
          cerr << "row_ctr       == " << row_ctr << endl
               << "field_ctr     == " << field_ctr << endl
               << "affected_rows == " << affected_rows << endl;
       }  
#endif /* |DEBUG_COMPILE|  */@; 
       
@q **** (4) @>

@  Process the contents of |curr_row|.

@<|main| definition@>=

       curr_row = 0;

       for (int i = 0; i < row_ctr; ++i)
       {
@q ***** (5) @>

          curr_row = mysql_fetch_row(result);

          if (curr_row == 0)
          {
              if (DEBUG) 
                 cerr << "`mysql_fetch_row' returned NULL:" 
                      << endl;

              if (*mysql_error(mysql))
                {
                  cerr << "ERROR!  In `main':  `mysql_fetch_row' failed "
                       << "returning NULL." << endl
                       << "Error:  " << mysql_error(mysql) << endl
                       << "Exiting `songlist' unsuccessfully with exit status 1."
                       << endl;

                  /* Close connection to database.  */

                  mysql_library_end();
   
                  exit(1);

                }
              else if (DEBUG)
                {
                  cerr << "No more rows." << endl;
                }

              break;

         }  /* |if (curr_row == 0)|  */

@q ***** (5) @>
       
         else
         {
             cerr << "`mysql_fetch_row' succeeded." << endl
                  << "`curr_row[0]' == " << curr_row[0] << endl
                  << "`curr_row[1]' == " << curr_row[1] << endl;
         }


@q ***** (5) @>

       } /* |for| */


@q **** (4) @>

   } /* |if (status == 0)| */

@q *** (3) @>
     
   else
   {
        cerr << "ERROR!  In `main':  `submit_mysql_query' failed, returning "
             << status << ".";

   } /* |else| (|status != 0|) */

/* *** (3)  */

   /* Close connection to database.  */

   mysql_close(mysql);
   mysql_library_end();

   out_strm.close();

   /* Exit  */

   cerr << "Exiting `taxonomy' successfully with exit status 0." << endl;
   
   exit(0);

/* *** (3)  */

}  /* End of |main| definition  */

@q ** (2) @>
@
@<|submit_mysql_query| definition@>=
int
submit_mysql_query(string query_str)
{
  int status = 0;

  bool DEBUG = true;  /* |false|  */

  if (DEBUG)
  { 
      cerr << "Entering `submit_mysql_query'." << endl;
  } 
  
  mysql_query(mysql, query_str.c_str());

   if (status != 0)
   {
        
     cerr  << "ERROR!  In `submit_mysql_query':"
           << endl 
           << "`mysql_query' failed, returning " << status << ":"
           << endl 
           << "Error:  " << mysql_error(mysql)
           << endl 
           << "Error number:  " << mysql_errno(mysql)
           << endl 
           << "Exiting function unsuccessfully with return value 1." 
           << endl;
        

     return 1;
       
   }  /* |if| (|mysql_query| failed.)  */

   result = mysql_store_result(mysql);        

   if (result == 0)
   {
     if (DEBUG)
       cerr << endl 
            << "`mysql_store_result' returned 0."
            << endl
            << "Exiting function with return value 0." 
            << endl;

     return 0;
          
   }  /* |if| (No result)  */
   
   row_ctr   = mysql_num_rows(result);
   field_ctr = mysql_num_fields(result);

   if (DEBUG)
   {
     cerr << "`row_ctr' == " << row_ctr 
          << endl
          << "`field_ctr' == " << field_ctr 
          << endl;

   }  /* |if (DEBUG)|  */
   
   affected_rows = (long) mysql_affected_rows(mysql);

   if (DEBUG)
   {
     
     cerr << "`affected_rows' == " << affected_rows
          << endl
          << "Exiting function with return value 0."
          << endl;
   }

   return 0;
   
}  /* |submit_mysql_query| definition */

/* |get_datestamp| definition  */

@q ** (2) @>
@
@<|get_datestamp| definition@>=
int
get_datestamp(string &datestamp, string &datestamp_short)
{
#if DEBUG_COMPILE
  bool DEBUG = true;  /* |false|  */
#endif /* |DEBUG_COMPILE|  */@; 

    char outstr[64];

    memset(outstr, 0, 64);

    time_t t;
    struct tm tmp;

    t = time(NULL);

    if (localtime_r(&t, &tmp) == 0) 
    {
        cerr << "ERROR!  In `get_datestamp':  `localtime_r' failed, returning 0:"
             << endl
             << "Not creating datestamps.  Exiting function return value 1."
             << endl;

        return 1;

    }

    if (strftime(outstr, sizeof(outstr), "%a, %d %b %Y %T %Z", &tmp) == 0) 
    {
        cerr << "ERROR!  In `get_datestamp':  `strftime' failed, returning 0."
             << endl
             << "Not creating datestamps.  Exiting function with return value 1."
             << endl;

        return 1;

    }

    datestamp = outstr;

    memset(outstr, 0, 64);

    if (strftime(outstr, sizeof(outstr), "%Y.%m.%d", &tmp) == 0) 
    {
        cerr << "ERROR!  In `get_datestamp':  `strftime' failed, returning 0."
             << endl
             << "Not creating datestamps.  Exiting function with return value 1."
             << endl;

        return 1;

    }
    
    datestamp_short = outstr;

    if (DEBUG) 
    {
        cerr << "Result strings are:" << endl
             << "`datestamp'       == " << datestamp << endl
             << "`datestamp_short' == " << datestamp_short << endl;

    }  /* |else|  */

    return 0;

}  /* End of |get_datestamp| definition  */

@q * (1) @>
@
@c
@<Include files@>@;
using namespace std;
@<Global variables@>@;
@<Function declarations@>@;
@<|main| definition@>@;
@<|submit_mysql_query| definition@>@;
@<|get_datestamp| definition@>@;

@q * (1) Emacs-Lisp code for use in indirect buffers when using the          @>
@q       GNU Emacs editor.  The local variable list is not evaluated when an @>
@q       indirect buffer is visited, so it's necessary to evaluate the       @>
@q       following s-expression in order to use the facilities normally      @>
@q       accessed via the local variables list.                              @>
@q       \initials{LDF 2004.02.12}.                                          @>
@q       (progn (cweb-mode) (outline-minor-mode t))                          @>

@q * Local variables for Emacs.  @>




@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q fill-column:80 @>
@q End: @>

