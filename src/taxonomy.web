@q taxonomy.web @>
          
@q * (0) Copyright and License.@>

@q This file is part of Taxonomy-Database. @>
@q Copyright (C) 2021 Laurence D. Finston. @>

@q Taxonomy-Database is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q Taxonomy-Database is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with Taxonomy-Database; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q Taxonomy-Database is available for downloading from @>
@q https://github.com/lfinston/Taxonomy-Database @>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>

@q * (1)  Include files.@>
@ Include files.

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <mysql.h>
#include <errno.h>
#include <float.h>
#include <fstream>
#include <limits.h>
#include <stdarg.h>
#include <stdexcept>

#include <mysql.h>

using namespace std;

#include <algorithm>
#include <exception>
#include <functional>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <sstream>   
#include <string> 
#include <vector>

#include "../config.h"

typedef void* yyscan_t;  

#include "classes.hxx"
#include "parser.hxx"
#include "scanner.hxx"

int parameter_val = 0;

int
yyparse(yyscan_t);

int
submit_mysql_query(string query_str, 
                   MYSQL *&mysql,
                   MYSQL_RES *&result,
                   unsigned int &row_ctr,
                   unsigned int &field_ctr,
                   long &affected_rows);

@q * (1) Main@>
@* Main.

@<Main@>=
int
main(int argc, char *argv[])
{
@q ** (2) @>

   bool DEBUG = true;  /* |false|  */

   MYSQL *mysql;
   MYSQL_ROW curr_row = 0;
   MYSQL_RES *result;
     
   unsigned int row_ctr = 0; 
   unsigned int field_ctr = 0;
   long affected_rows = 0;

   stringstream sql_strm;

   int status = 0;

@q ** (2) @>

   cerr << "Entering `main'." << endl;

/* ** (2) Initialize  |mysql|  */

   mysql = mysql_init(0);

   if (mysql != 0)
     {
       if (DEBUG) 
         cerr << "mysql_init succeeded." << endl;
     }
   else
     {
       cerr << "ERROR!  In `main': `mysql_init failed'." << endl
            << "Exiting `songlist' unsuccessfully with exit status 1."
            << endl;

       exit(1);
     }

   unsigned int mysql_timeout = 120;
  
   // mysql_options(mysql, MYSQL_OPT_RECONNECT, 0);

   mysql_options(mysql, MYSQL_OPT_CONNECT_TIMEOUT, &mysql_timeout); 
  
   if (!mysql_real_connect(mysql, "localhost", "taxonomy", 0, "Taxonomy", 0, NULL, 0))
   {
       fprintf(stderr, "Failed to connect to database: Error: %s\n",
               mysql_error(mysql));
   }

@q ** (2) @>
@
@<Main@>=

   sql_strm << "show tables;";

   status = submit_mysql_query(sql_strm.str(), 
                               mysql,
                               result,
                               row_ctr,
                               field_ctr,
                               affected_rows);
   if (status != 0)
   {
       cerr << "ERROR!  In `main':  `submit_mysql_query' failed, returning " << status << "."
            << endl 
            << "Will try to continue."
            << endl;
   }
   else if (DEBUG)
   {
       cerr << "In `main':  `submit_mysql_query' succeeded, returning 0."
            << endl;
            
   }

@q ** (2) @>
@
@<Main@>=

   for (int i = 0; i < row_ctr; ++i)
   {
@q *** (3) @>

      curr_row = mysql_fetch_row(result);

      if (curr_row == 0)
      {
        if (DEBUG) 
           cerr << "`mysql_fetch_row' returned NULL:" 
                << endl;

        if (*mysql_error(mysql))
        {
           cerr << "ERROR!  In `main':  `mysql_fetch_row' failed, returning NULL." 
                << endl
                << "Error:  " << mysql_error(mysql) << endl
                << "Exiting `taxomony' unsuccessfully with exit status 1."
                << endl;

           /* Close connection to database.  */

           mysql_library_end();
   
           exit(1);

        }
        else if (DEBUG)
        {
            cerr << "No more rows." << endl;
        }

        break;

      }  /* |if (curr_row == 0)|  */

      else if (DEBUG)
      {
         cerr << "`curr_row[0]' == " << curr_row[0] << endl;
      }


@q *** (3) @>

@q *** (3) @>

   }  /* |for|  */
   
@q ** (2) Close connection to database.@>

@q ** (2) @>
@
@<Main@>=


   int fd;

   ofstream out_strm;
   ifstream in_strm;

   int BUFFER_SIZE = 256;

   char buffer[BUFFER_SIZE];
   memset(buffer, 0, BUFFER_SIZE);

   char *buffer_ptr = 0;

   yyscan_t parameter;

   // parameter = &parameter_val;

   yylex_init(&parameter);      

   yyset_extra(&parameter_val, parameter);

   YY_BUFFER_STATE yy_buffer_state;

   char out_strm_filename[] = "/tmp/gwirdsif.XXXXXX";

   string temp_filename;

   FILE *fp = 0;

   fp = fopen("test_input.txt", "r");
      
   yyrestart(fp, parameter);

   yydebug = 0; /* 1 */

   status = yyparse(parameter);

@ Close connection to database.

@<Main@>=

    mysql_close(mysql);
    mysql_library_end();


@q ** (2) Exit @>

    cerr << "Exiting `main' successfully with exit status 0." << endl;

    return 0;

}  /* End of |main| definition  */

@q * (1) @>

@* Submit MySQL Query.
\initials{LDF 2021.08.14.}

@<|submit_mysql_query| definition@>=
int
submit_mysql_query(string query_str, 
                   MYSQL *&mysql,
                   MYSQL_RES *&result,
                   unsigned int &row_ctr,
                   unsigned int &field_ctr,
                   long &affected_rows)
{
  int status = 0;

  bool DEBUG = true;  /* |false|  */

  if (DEBUG)
  { 
      cerr << "Entering `submit_mysql_query'." << endl;
  } 
  
  mysql_query(mysql, query_str.c_str());

   if (status != 0)
   {
        
     cerr  << "ERROR!  In `submit_mysql_query':"
           << endl 
           << "`mysql_query' failed, returning " << status << ":"
           << endl 
           << "Error:  " << mysql_error(mysql)
           << endl 
           << "Error number:  " << mysql_errno(mysql)
           << endl 
           << "Exiting function unsuccessfully with return value 1." 
           << endl;
        

     return 1;
       
   }  /* |if| (|mysql_query| failed.)  */

   result = mysql_store_result(mysql);        

   if (result == 0)
   {
     if (DEBUG)
       cerr << endl 
            << "`mysql_store_result' returned 0."
            << endl
            << "Exiting function with return value 0." 
            << endl;

     return 0;
          
   }  /* |if| (No result)  */
   
   row_ctr   = mysql_num_rows(result);
   field_ctr = mysql_num_fields(result);

   if (DEBUG)
   {
     cerr << "`row_ctr' == " << row_ctr 
          << endl
          << "`field_ctr' == " << field_ctr 
          << endl;

   }  /* |if (DEBUG)|  */
   
   affected_rows = (long) mysql_affected_rows(mysql);

   if (DEBUG)
   {
     
     cerr << "`affected_rows' == " << affected_rows
          << endl
          << "Exiting function with return value 0."
          << endl;
   }



   return 0;
   
}  /* |submit_mysql_query| definition */

@q * (1) Putting Taxonomy-Database.@>
@* Putting Taxonomy-Database together.

@q ** (2) This is what's compiled.@>
@ This is what's compiled.

@c
@<Include files@>@;
@<Main@>@;
@<|submit_mysql_query| definition@>@;


@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode)                   (ignore " @>
@q ")  (setq fill-column 80) (column-number-mode 1))                     @>

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q makefile:"makefile" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q End: @>

