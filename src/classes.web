@q classes.web @>
          
@q * (0) Copyright and License.@>

@q This file is part of Taxonomy-Database. @>
@q Copyright (C) 2021 Laurence D. Finston. @>

@q Taxonomy-Database is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q Taxonomy-Database is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with Taxonomy-Database; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q Taxonomy-Database is available for downloading from @>
@q https://github.com/lfinston/Taxonomy-Database @>

@q ("@@" stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>

@q * (1)  Include files.@>
@ Include files.

@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <mysql.h>
#include <errno.h>
#include <float.h>
#include <fstream>
#include <limits.h>
#include <stdarg.h>
#include <stdexcept>

#include <mysql.h>

using namespace std;

#include <algorithm>
#include <exception>
#include <functional>
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <sstream>   
#include <string> 
#include <vector>

#include "../config.h"

typedef void* yyscan_t;  

#include "parser.hxx"
#include "scanner.hxx"

@q * (1) Class declarations.  @>
@* Class declarations.
\initials{LDF 2021.08.15.}

@q ** (2) @>

@
@<class declarations@>=
struct
IO_Type
{
   string in_filename;
   string out_filename;

   FILE *in_file;

   fpos_t in_file_pos;

   ofstream out_file_tex;
   ofstream out_file_html;

   IO_Type(void) {return;}
   IO_Type(const IO_Type &i) {in_filename = i.in_filename; out_filename = i.out_filename; return;}

};

@q ** (2) @>

@*1 |class Scanner_Type|.
@
@<class declarations@>=
class
Scanner_Type
{
    friend int yyparse(yyscan_t);
    friend int yylex(YYSTYPE* lvalp, yyscan_t parameter);
    friend int main(int argc, char *argv[]);

    int id;
  
    bool end_flag;

    public:

       Scanner_Type(void) {id = 0; end_flag = false; return;};
       Scanner_Type(int i) : id(i) {end_flag = false; return;};

       int clear(void) {id = 0; end_flag = false; return 0;};

};

typedef Scanner_Type *Scanner_Node;

@*1 |class kingdom|.

@<class declarations@>=
class Kingdom
{

   friend int main(int, char *[]);
   friend int get_data_from_database(MYSQL *&mysql);

   int id;
   string name;

public:   

   Kingdom(void) : id(0), name("") {return;}
   int clear(void) {id = 0; name = ""; return 0;}
   void show(string s = "") 
   {
      if (s.length() == 0)
         s = "Kingdom:";

      cerr << s << endl 
           << "id:    " << id << endl 
           << "name:  " << name << endl;
           
      return;
   }
 

};

@q * (1) Putting classes together.@>
@* Putting classes together.

@q ** (2) This is what's compiled.@>
@ This is what's compiled.

@c
@<Include files@>@;
@<class declarations@>@;@/

@q **** (4) This is what's written to the header file `classes.hxx'.  @>

@ This is what's written to the header file \filename{classes.hxx}.
@
@(classes.hxx@>=
#ifndef CLASSES_H
#define CLASSES_H 1
using namespace std;
@<class declarations@>@;@/
#endif 



@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode)                   (ignore " @>
@q ")  (setq fill-column 80) (column-number-mode 1))                     @>

@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q makefile:"makefile" @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q End: @>

